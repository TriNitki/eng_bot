import db.users, db.topics, db.tests, db.articles, db.questions

about_msg = '''
üåü @Mega_EngBot ‚Äî –≤–∞—à –ª—É—á—à–∏–π Telegram-–±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! üìöüåç

üß† –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ —Ç–µ—Å—Ç—ã
üìñ –ß–∏—Ç–∞–π—Ç–µ –∑–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –≤ —Ç–∞–±–ª–∏—Üe –ª–∏–¥–µ—Ä–æ–≤

üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ —ç—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! üéâ‚ú®
'''

numbers = {'0':'0Ô∏è‚É£','1':'1Ô∏è‚É£','2':'2Ô∏è‚É£','3':'3Ô∏è‚É£','4':'4Ô∏è‚É£','5':'5Ô∏è‚É£','6':'6Ô∏è‚É£','7':'7Ô∏è‚É£','8':'8Ô∏è‚É£','9':'9Ô∏è‚É£'}
medals = {'1':'ü•á','2':'ü•à','3':'ü•â'}

def greet_user(user):
    msg = f'''
üì∑ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üôã‚Äç‚ôÇÔ∏è –ò–º—è:             {user.first_name}
üìõ –§–∞–º–∏–ª–∏—è:   {user.last_name}
üéì –ì—Ä—É–ø–ø–∞:       {user.student_group}
‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥:     {user.score}
'''
    return msg

def get_topic(topic_id):
    topic_name = db.topics.get_name(topic_id)
    msg = f'üìá –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞:  {topic_name}\n\n'
    
    article_names = db.articles.get_articles(topic_id)
    test_names = db.tests.get_tests(topic_id)
    
    if article_names:
        article_msg = "\n".join([f'‚ñ∫  {article["name"]}' for article in article_names])
        msg += f'üìñ –°—Ç–∞—Ç—å–∏:\n{article_msg}\n\n'
    
    if test_names:
        test_msg = "\n".join([f'‚ñ∫  {test["name"]}' for test in test_names])
        msg += f'üß† –¢–µ—Å—Ç—ã:\n{test_msg}\n'
    
    if not article_names and not test_names:
        msg += '–í —ç—Ç–æ—Ç —Ç–æ–ø–∏–∫ –µ—â–µ –Ω–µ —É—Å–ø–µ–ª–∏ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å üòî'
    
    return msg

def get_topics():
    topics = db.topics.get_all_topics()
    msg = 'üóÇÔ∏è –°–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤:\n\n'
    msg += '\n'.join([f"{get_number(idx+1)}  ‚Üí  {topic['name']}" for idx, topic in enumerate(topics)])
    return msg

def get_leader_board(user_id):
    leader_board = db.users.get_leader_board_data()
    
    msg = 'üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n'
    
    for idx, user in enumerate(leader_board):
        user_name = user['first_name'] if user['is_registered'] else str(user['user_id'])[:3]+('*'*5)
        msg += f'{get_number(idx+1) if idx > 2 else medals[str(idx+1)]} ‚ñ∫ {user_name} ‚óÑ {user["score"]} –æ—á–∫.\n'
    
    return msg

def get_number(value):
    text = str(value)
    for num, emoji in numbers.items():
        text = text.replace(num, emoji)
    return text

def get_tests(topic_id):
    tests = db.tests.get_tests(topic_id)
    topic_name = db.topics.get_name(topic_id)
    msg = f'üìÑ –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–æ–ø–∏–∫–∞ {topic_name}:\n\n'
    msg += '\n'.join([f"‚ñ∫  {test['name']}" for test in tests])
    return msg

def get_articles(topic_id):
    articles = db.articles.get_articles(topic_id)
    topic_name = db.topics.get_name(topic_id)
    msg = f'üìÑ –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–æ–ø–∏–∫–∞ {topic_name}:\n\n'
    msg += '\n'.join([f"‚ñ∫  {article['name']}" for article in articles])
    return msg

def admin_msg_handler(message):
    user_id = message.chat.id
    if message.text.startswith('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        db.users.set_action(user_id, 'back_to_main')
    elif message.text.startswith('–¢–æ–ø–∏–∫–∏'):
        db.users.set_action(user_id, 'edit_topic')
    elif message.text.startswith('–°–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫'):
        db.users.set_action(user_id, 'add_topic')
    elif message.text.startswith('–£–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫'):
        db.users.set_action(user_id, 'del_topic')
        
def get_test_info(user_id, test_id):
    test = db.tests.get_test(test_id)
    test_by = db.users.get_user(test["user_id"])
    
    highest_score = db.tests.get_highest_score(user_id, test_id)
    questions = db.questions.get_questions(test_id)
    questions_amount = len(questions)
    questions_price = sum([question["price"] for question in questions])
    
    msg = f"üìã –¢–µ—Å—Ç: {test['name']}\n\n"
    msg += "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–∞: –ê–Ω–æ–Ω–∏–º\n" if test_by["last_name"] is None or test_by["first_name"] is None \
                                else f"üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–∞: {test_by['last_name']} {test_by['first_name']}\n"
    msg += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_amount}\n"

    msg += "‚ùó –í—ã —Ä–∞–Ω–µ–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç" if highest_score is None else f"üåü –í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {highest_score}/{questions_price}"
    return msg

def get_test_results(answers):
    msg = 'üìù –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n'
    for idx, answer in enumerate(answers):
        q_content = db.questions.get_content(answer['question_id'])
        msg += f'{idx+1}. {q_content}\n     ‚ñ∫  {answer["answer_content"]}  '
        if answer["correctness"]:
            msg += '‚úÖ\n'
        else:
            msg += '‚ùå\n'
        
    return msg
        
def get_article_info(article_id):
    article = db.articles.get_article(article_id)
    article_by = db.users.get_user(article["user_id"])
    
    msg = f"üìã –°—Ç–∞—Ç—å—è: {article['name']}\n"
    msg += "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–∞: –ê–Ω–æ–Ω–∏–º\n\n" if article_by["last_name"] is None or article_by["first_name"] is None \
                                else f"üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–∞: {article_by['last_name']} {article_by['first_name']}\n\n"
    
    msg += f"‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {article['description']}" if article['description'] else "‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –∫ –¥–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    return msg
    
def get_test_ending(correct_answers, total_answers, score_dif):
    msg = f"üéØ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers}/{total_answers}.\n\n"
    
    if correct_answers == total_answers:
        msg += "üëè –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª!\n"
        if score_dif <= 0:
            return msg
    
    if score_dif > 0:
        msg += f"üëè –í—ã –ø–æ–ª—É—á–∏–ª–∏ {score_dif} {score_type(score_dif)}.\n"
    else:
        msg += "–í—ã –Ω–∞–±—Ä–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã üò¢\n"
    
    return msg

def score_type(score):
    if score % 10 in [2, 3, 4]:
        return '–±–∞–ª–ª–∞'
    elif score % 10 != 1 or score % 100 == 11:
        return '–±–∞–ª–ª–æ–≤'
    else:
        return '–±–∞–ª–ª'
 